name: tests
on: [push]

env:
  GO111MODULE: on

jobs:
  go-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/checkout@v2
      - name: Run `gofmt`
        shell: bash
        run: diff -u <(echo -n) <(gofmt -d -s .)

  go-mod-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/checkout@v2
      - name: Ensure `go mod tidy` produces a zero diff
        shell: bash
        run: go generate ./... && go mod tidy && git diff --exit-code; code=$?; git checkout -- .; (exit $code)

  go-vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/checkout@v2
      - name: Cache go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run `go vet ./...`
        run: go generate ./... && go vet ./...

  go-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.14.1
      - uses: actions/checkout@v2

      - name: Start containers
        run: docker-compose up -d redis minio

      - name: Cache go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run `go test -v -race ./...`
        run: go generate ./... && go test -v -race ./...

  go-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/checkout@v2
      - name: Cache go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run `go build ./cmd/...`
        run: go generate ./... && go build ./cmd/...

  npx-eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install && npx eslint ui

  npx-webpack-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install && npx webpack build

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: docker build .
